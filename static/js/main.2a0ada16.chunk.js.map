{"version":3,"sources":["consts.js","utils.js","BoardElements.jsx","HeaderElements.jsx","Footer.jsx","App.jsx","index.js"],"names":["TILE_WIDTH","TILE_PADDING","TILE_CONSTANTS","Object","freeze","TILE_HEIGHT","TILE_CORNER_RADIUS","BOARD_WIDTH","BOARD_HEIGHT","BOARD_CONSTANTS","BOARD_ROWS","BOARD_COLS","BOARD_CORNER_RADIUS","HEADER_HEIGHT","HEADER_PADDING","FOOTER_HEIGHT","LABEL_CONSTANTS","LABEL_WIDTH","LABEL_HEIGHT","LABEL_CORNER_RADIUS","MOVEMENT_DIRECTIONS","LEFT","RIGHT","UP","DOWN","MOVEMENT_DIRECTION_OF_EVENT_KEY","ANIMATION_DURATIONS","ENTER_DURATION","MOVE_DURATION","SCORE_INCREASE_DURATION","BOARD_COLOR","STYLE_OF_VALUE","fillColor","textColor","fontSize","collapse","filledData","direction","matrixToUse","matrix","r","push","Array","fill","value","position","id","data","Math","floor","c","toMatrix","transpose","map","row","rnum","nonemptyElementsInRow","filter","length","collapsedRow","additionalScore","reverse","basePos","positionDelta","head","tail","init","reduce","accumulator","current","scoreIncrease","accumulatorRow","tileToLeft","collapseInDirection","acc","v","concat","canMoveInDirection","matrixToCompareTo","matrix1","matrix2","matrixCopy","slice","collapseLeft","collapsedDown","every","otherRow","cnum","getPosition","x","y","getPositionFlat","i","gameOver","extendWithNewEntry","takenIndices","openIndices","keys","includes","newElement","random","index","String","filteredRow","nonPaddedCollapsed","_","col","Board","props","emptyTiles","from","rownum","colnum","EmptyTile","transform","width","height","rx","style","NumberTile","state","scale","textAnchor","alignmentBaseline","fontFamily","Title","ScoreLabel","score","round","Footer","href","App","tileNumber","addNewEntry","bind","processKeyPress","keyOfEntry","this","document","addEventListener","setTimeout","removeEventListener","event","key","undefined","setState","oldFilledData","d","timing","duration","body","align","show","start","update","keyAccessor","startTransition","enter","enterTransition","updateTransition","leave","updateLeave","nodes","opacity","backgroundColor","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2a0ada16.chunk.js","sourcesContent":["// A file containing many constants to play 2048.\n\n// Tile size constants\nconst TILE_WIDTH = 100;\nconst TILE_HEIGHT = TILE_WIDTH;\nconst TILE_PADDING = TILE_WIDTH / 7;\nconst TILE_CORNER_RADIUS = TILE_WIDTH / 35;\n\nexport const TILE_CONSTANTS = Object.freeze({\n  TILE_WIDTH: TILE_WIDTH,\n  TILE_HEIGHT: TILE_HEIGHT,\n  TILE_PADDING: TILE_PADDING,\n  TILE_CORNER_RADIUS: TILE_CORNER_RADIUS,\n});\n\n// Board dimensions constants\nconst BOARD_ROWS = 4;\nconst BOARD_COLS = BOARD_ROWS;\nconst BOARD_WIDTH = TILE_PADDING + BOARD_COLS * (TILE_WIDTH + TILE_PADDING);\nconst BOARD_HEIGHT = TILE_PADDING + BOARD_ROWS * (TILE_HEIGHT + TILE_PADDING);\nconst BOARD_CORNER_RADIUS = BOARD_WIDTH/80;\n\nexport const BOARD_CONSTANTS = Object.freeze({\n  BOARD_ROWS: BOARD_ROWS,\n  BOARD_COLS: BOARD_COLS,\n  BOARD_WIDTH: BOARD_WIDTH,\n  BOARD_HEIGHT: BOARD_HEIGHT,\n  BOARD_CORNER_RADIUS: BOARD_CORNER_RADIUS,\n});\n\n// Header constants\nexport const HEADER_HEIGHT = BOARD_HEIGHT / 3;\nexport const HEADER_PADDING = 10;\n\n// Footer constants\nexport const FOOTER_HEIGHT = BOARD_HEIGHT / 3;\n\n// Label constants\nexport const LABEL_CONSTANTS = Object.freeze({\n  LABEL_WIDTH: 150,\n  LABEL_HEIGHT: 75,\n  LABEL_CORNER_RADIUS: 5,\n});\n\n// Probability of generating a 2 (generates a 4 otherwise)\nexport const GENERATE_2_PROBABILITY = 0.8;\n\n// Movement (left / right / up / down) constants\nexport const MOVEMENT_DIRECTIONS = Object.freeze({\n  LEFT: 1,\n  RIGHT: 2,\n  UP: 3,\n  DOWN: 4,\n});\n\nexport const MOVEMENT_DIRECTION_OF_EVENT_KEY = Object.freeze({\n  \"ArrowLeft\": MOVEMENT_DIRECTIONS.LEFT,\n  \"ArrowRight\":MOVEMENT_DIRECTIONS.RIGHT,\n  \"ArrowUp\": MOVEMENT_DIRECTIONS.UP,\n  \"ArrowDown\":  MOVEMENT_DIRECTIONS.DOWN,\n});\n\n// Animation durations\nconst ENTER_DURATION = 125;\nconst MOVE_DURATION = 150;\nconst SCORE_INCREASE_DURATION = 200;\n\nexport const ANIMATION_DURATIONS = Object.freeze({\n  ENTER_DURATION: ENTER_DURATION,\n  MOVE_DURATION: MOVE_DURATION,\n  SCORE_INCREASE_DURATION: SCORE_INCREASE_DURATION,\n});\n\n// The absense of a value: used in code to represent no tile present\nexport const EMPTY_VALUE = 0;\n\n// URL to the original game.\nexport const ORIGINAL_2048_URL = \"https://play2048.co\";\n\n// CSS styling constants\nexport const BOARD_COLOR = '#bbada0';\n\nexport const STYLE_OF_VALUE = Object.freeze({\n  [EMPTY_VALUE]: {\n    fillColor: '#cdc1b4',\n    textColor: '#cdc1b4',\n    fontSize: 0.0,\n  },\n  2: {\n    fillColor: '#eee4da',\n    textColor: '#776e65',\n    fontSize: 2.5,\n  },\n  4: {\n    fillColor: '#ede0c8',\n    textColor: '#776e65',\n    fontSize: 2.5,\n  },\n  8: {\n    fillColor: 'f2b179',\n    textColor: '#f9f6f2',\n    fontSize: 2.5,\n  },\n  16: {\n    fillColor: '#f59563',\n    textColor: '#f9f6f2',\n    fontSize: 2.2,\n  },\n  32: {\n    fillColor: '#f67c5f',\n    textColor: '#f9f6f2',\n    fontSize: 2.2,\n  },\n  64: {\n    fillColor: '#f65e3b',\n    textColor: '#f9f6f2',\n    fontSize: 2.2,\n  },\n  128: {\n    fillColor: '#edcf72',\n    textColor: '#f9f6f2',\n    fontSize: 1.9,\n  },\n  256: {\n    fillColor: '#edcc61',\n    textColor: '#f9f6f2',\n    fontSize: 1.9,\n  },\n  512: {\n    fillColor: '#edc850',\n    textColor: '#f9f6f2',\n    fontSize: 1.9,\n  },\n  1024: {\n    fillColor: '#edc53f',\n    textColor: '#f9f6f2',\n    fontSize: 1.6,\n  },\n  2048: {\n    fillColor: '#edc22e',\n    textColor: '#f9f6f2',\n    fontSize: 1.6,\n  },\n  4096: {\n    fillColor: '#3c3a32',\n    textColor: '#f9f6f2',\n    fontSize: 1.6,\n  },\n  8192: {\n    fillColor: '#3c3a32',\n    textColor: '#f9f6f2',\n    fontSize: 1.6,\n  },\n  16384: {\n    fillColor: '#3c3a32',\n    textColor: '#f9f6f2',\n    fontSize: 1.3,\n  },\n  32768: {\n    fillColor: '#3c3a32',\n    textColor: '#f9f6f2',\n    fontSize: 1.3,\n  },\n  65536: {\n    fillColor: '#3c3a32',\n    textColor: '#f9f6f2',\n    fontSize: 1.3,\n  },\n});","import {\n  TILE_CONSTANTS,\n  BOARD_CONSTANTS,\n  EMPTY_VALUE, MOVEMENT_DIRECTIONS,\n  GENERATE_2_PROBABILITY\n} from './consts'\n\nconst {BOARD_ROWS, BOARD_COLS} = BOARD_CONSTANTS;\n\n// The main function that collapses the data of the actual tiles in the specified direction.\nexport function collapse(filledData, direction) {\n  const matrix = toMatrix(filledData);\n  let matrixToUse;\n  switch (direction) {\n    case MOVEMENT_DIRECTIONS.LEFT:\n    case MOVEMENT_DIRECTIONS.RIGHT:\n      matrixToUse = matrix;\n      break;\n    case MOVEMENT_DIRECTIONS.UP:\n    case MOVEMENT_DIRECTIONS.DOWN:\n      matrixToUse = transpose(matrix);\n      break;\n    default:\n      matrixToUse = null;\n      break;\n  }\n  return matrixToUse.map((row, rnum) => collapseInDirection(row, rnum, direction)).reduce((acc, v) => {\n    const { collapsedRow, additionalScore } = v;\n    return {\n      filledData: acc.filledData.concat(collapsedRow),\n      additionalScore: acc.additionalScore + additionalScore,\n    }\n  }, {filledData: [], additionalScore: 0});\n}\n\n// Whether attempting to move the specified filled board tiles in the given direction\n// would cause the state of the board to change\nexport function canMoveInDirection(filledData, direction) {\n  const matrix = [];\n  for (let r = 0; r < BOARD_ROWS; r++) {\n    matrix.push(Array(BOARD_COLS).fill(EMPTY_VALUE));\n  }\n\n  for (let data of filledData) {\n    const position = data.position;\n    const r = Math.floor(position / BOARD_COLS);\n    const c = position % BOARD_COLS\n    matrix[r][c] = data.value;\n  }\n\n  const matrixCopy = matrix.map(row => row.slice());\n  let matrixToCompareTo;\n  switch (direction) {\n    case MOVEMENT_DIRECTIONS.LEFT:\n      matrixToCompareTo = collapseLeft(matrixCopy);\n      break;\n    case MOVEMENT_DIRECTIONS.RIGHT:\n      const collapsed = collapseLeft(matrixCopy.map(row => row.reverse()));\n      matrixToCompareTo = collapsed.map(row => row.reverse());\n      break;\n    case MOVEMENT_DIRECTIONS.UP:\n      matrixToCompareTo = transpose(collapseLeft(transpose(matrixCopy)));\n      break;\n    case MOVEMENT_DIRECTIONS.DOWN:\n      const collapsedDown = collapseLeft(transpose(matrixCopy).map(row => row.reverse()));\n      matrixToCompareTo = transpose(collapsedDown.map(row => row.reverse()));\n      break;\n    default:\n      break;\n  }\n\n  return !matrixEqual(matrix, matrixToCompareTo);\n}\n\n// The (x,y) screen position to position the tile at row r and column c.\nexport function getPosition(r, c) {\n  const { TILE_WIDTH, TILE_HEIGHT, TILE_PADDING } = TILE_CONSTANTS;\n  return {\n    x: c*(TILE_WIDTH + TILE_PADDING) + TILE_PADDING/2,\n    y: r*(TILE_HEIGHT + TILE_PADDING) + TILE_PADDING/2,\n  }\n}\n\n// The (x,y) screen position to position the tile at (flat) position i.\nexport function getPositionFlat(i) {\n  return getPosition(\n    Math.floor(i / BOARD_COLS),\n    i % BOARD_COLS\n  );\n}\n\n// Whether the game has been lost.\nexport function gameOver(filledData) {\n  return (filledData.length === BOARD_ROWS * BOARD_COLS\n          && !canMoveInDirection(filledData, MOVEMENT_DIRECTIONS.LEFT)\n          && !canMoveInDirection(filledData, MOVEMENT_DIRECTIONS.RIGHT)\n          && !canMoveInDirection(filledData, MOVEMENT_DIRECTIONS.UP)\n          && !canMoveInDirection(filledData, MOVEMENT_DIRECTIONS.DOWN));\n}\n\n// Adds a new tile (either a 2 or a 4) to the given filled tiles.\nexport function extendWithNewEntry(filledData, id) {\n  const takenIndices = filledData.map(({position}) => position)\n  const openIndices = [...Array(BOARD_ROWS * BOARD_COLS).keys()].filter(i => !takenIndices.includes(i));\n  const newElement = Math.random() < GENERATE_2_PROBABILITY ? 2 : 4;\n  const index = Math.floor(Math.random() * openIndices.length);\n  return filledData.concat([{value: newElement, position: openIndices[index], id: String(id)}])\n}\n\n// Collapses a simplified (just tile values) version of the board to the\n// version it would be after moving left.\nfunction collapseLeft(matrix) {\n  return matrix.map(row => {\n    const filteredRow = row.filter(value => value !== EMPTY_VALUE);\n    let nonPaddedCollapsed = [];\n    if (filteredRow.length > 0) {\n      const [head, ...tail] = filteredRow;\n      nonPaddedCollapsed = tail.reduce((acc, v) => {\n        const toCompare = acc[acc.length-1];\n        if (toCompare === v) {\n          acc[acc.length-1] *= 2;\n        } else {\n          acc.push(v);\n        }\n        return acc;\n      }, [head]);\n    }\n    return nonPaddedCollapsed.concat(Array(BOARD_COLS - nonPaddedCollapsed.length).fill(EMPTY_VALUE));\n  });\n}\n\n// Whether matrix1 and matrix2 are equivalent 2d arrays.\nfunction matrixEqual(matrix1, matrix2) {\n  return matrix1.length === matrix2.length && matrix1.every((row, rnum) => {\n    const otherRow = matrix2[rnum];\n    return row.length === otherRow.length && row.every((value, cnum) => {\n      return value === otherRow[cnum];\n    });\n  });\n}\n\n// Transposes the given matrix.\nfunction transpose(matrix) {\n  return matrix[0].map((_, col) => matrix.map(row => row[col]));\n}\n\n// Converts the data of the filled tiles to a matrix with that data, padding as needed.\nfunction toMatrix(filledData) {\n  const matrix = [];\n  for (let r = 0; r < BOARD_ROWS; r++) {\n    matrix.push(Array(BOARD_COLS).fill({value: EMPTY_VALUE, position: 0, id: \"0\"}));\n  }\n\n  for (let data of filledData) {\n    const position = data.position;\n    const r = Math.floor(position / BOARD_COLS);\n    const c = position % BOARD_COLS\n    matrix[r][c] = data;\n  }\n  return matrix;\n}\n\n// Collapses the given row with row number rnum in the specified direction.\nfunction collapseInDirection(row, rnum, direction) {\n  let nonemptyElementsInRow = row.filter(({value}) => value !== EMPTY_VALUE);\n  if (nonemptyElementsInRow.length === 0) {\n    return {\n      collapsedRow: [],\n      additionalScore: 0,\n    };\n  }\n  if (direction === MOVEMENT_DIRECTIONS.RIGHT || direction === MOVEMENT_DIRECTIONS.DOWN) {\n    nonemptyElementsInRow = nonemptyElementsInRow.reverse();\n  }\n  const [head, ...tail] = nonemptyElementsInRow;\n  let basePos;\n  let positionDelta;\n  switch (direction) {\n    case MOVEMENT_DIRECTIONS.LEFT:\n      basePos = rnum * BOARD_COLS;\n      positionDelta = 1;\n      break;\n    case MOVEMENT_DIRECTIONS.RIGHT:\n      basePos = (rnum + 1) * BOARD_COLS - 1;\n      positionDelta = -1;\n      break;\n    case MOVEMENT_DIRECTIONS.UP:\n      basePos = rnum;\n      positionDelta = BOARD_ROWS;\n      break;\n    case MOVEMENT_DIRECTIONS.DOWN:\n      basePos = rnum + (BOARD_ROWS - 1) * BOARD_COLS;\n      positionDelta = -BOARD_ROWS;\n      break;\n    default:\n      break;\n  }\n  const init = {\n    collapsedRow: [{\n      value: head.value,\n      position: basePos,\n      id: head.id,\n    }],\n    additionalScore: 0,\n  };\n  const reducedRowNotPadded = tail.reduce((accumulator, current) => {\n    const accumulatorRow = accumulator.collapsedRow;\n    const tileToLeft = accumulatorRow[accumulatorRow.length-1];\n    const leftValue = tileToLeft.value;\n    const currentValue = current.value;\n    let scoreIncrease;\n    if (leftValue === currentValue) {\n      tileToLeft.value *= 2;\n      scoreIncrease = tileToLeft.value;\n      current.position = tileToLeft.position;\n    } else {\n      scoreIncrease = 0;\n      current.position = tileToLeft.position + positionDelta;\n      accumulatorRow.push(current);\n    }\n    return {\n      collapsedRow: accumulatorRow,\n      additionalScore: accumulator.additionalScore + scoreIncrease,\n    };\n  }, init);\n  return reducedRowNotPadded;\n}","import {\n  BOARD_COLOR, BOARD_CONSTANTS,\n  EMPTY_VALUE, STYLE_OF_VALUE,\n  TILE_CONSTANTS\n} from './consts'\nimport { getPosition } from './utils'\n\n// The background board\nexport function Board(props) {\n  const {BOARD_ROWS, BOARD_COLS, BOARD_WIDTH, BOARD_HEIGHT, BOARD_CORNER_RADIUS} = BOARD_CONSTANTS;\n  const emptyTiles = Array.from(Array(BOARD_ROWS).keys(), rownum =>\n    Array.from(Array(BOARD_COLS).keys(), colnum => {\n      const {x, y} = getPosition(rownum, colnum);\n      return (\n        <EmptyTile\n          x={x}\n          y={y}\n          key={`<EmptyTile>(${rownum},${colnum})`}\n        />\n      );\n    })\n  );\n\n  const {x, y} = props;\n  return (\n    <g transform={`translate(${x}, ${y})`}>\n      <rect\n        x={0} y={0}\n        width={BOARD_WIDTH} height={BOARD_HEIGHT}\n        rx={BOARD_CORNER_RADIUS}\n        style={{fill: BOARD_COLOR}}\n      />\n      {emptyTiles}\n    </g>\n  );\n}\n\n// The physically filled number tile\nexport function NumberTile(props) {\n  // Heavily taken from\n  // https://codesandbox.io/s/animated-bar-chart-using-react-move-forked-ney90?file=/src/BarChart.js\n\n  const { data: {value}, state: {x, y, scale} } = props;\n  const {fillColor, textColor, fontSize} = STYLE_OF_VALUE[value];\n  const {TILE_WIDTH, TILE_HEIGHT, TILE_PADDING, TILE_CORNER_RADIUS} = TILE_CONSTANTS;\n  return (\n    <g transform={`translate(${x}, ${y})`}>\n      <rect\n          x={TILE_PADDING/2 + (1 - scale) * TILE_WIDTH/2}\n          y={TILE_PADDING/2 + (1 - scale) * TILE_HEIGHT/2}\n          rx={TILE_CORNER_RADIUS}\n          width={scale * TILE_WIDTH} height={scale * TILE_HEIGHT}\n          style={{fill: fillColor}}\n      />\n      <text\n          textAnchor=\"middle\"\n          x={TILE_WIDTH/2 + TILE_PADDING/2}\n          y={TILE_HEIGHT/2 + TILE_PADDING/2}\n          alignmentBaseline=\"central\"\n          style={{\n          fontSize: `${fontSize * scale}em`,\n          fontFamily: 'clear_sansbold',\n          fill: textColor\n          }}\n      >\n          {value}\n      </text>\n    </g>\n  );\n}\n\n// An empty background tile for the board\nfunction EmptyTile(props) {\n  const {x, y} = props;\n  const {fillColor} = STYLE_OF_VALUE[EMPTY_VALUE];\n  const {TILE_WIDTH, TILE_HEIGHT, TILE_PADDING, TILE_CORNER_RADIUS} = TILE_CONSTANTS;\n  return (\n    <g transform={`translate(${x}, ${y})`}>\n    <rect\n        x={TILE_PADDING / 2} y={TILE_PADDING / 2}\n        rx={TILE_CORNER_RADIUS}\n        width={TILE_WIDTH} height={TILE_HEIGHT}\n        style={{fill: fillColor}}\n    />\n    </g>\n  );\n}\n","import { BOARD_CONSTANTS, HEADER_PADDING, LABEL_CONSTANTS } from './consts'\n\n// The label showing the 2048 title\nexport function Title(props) {\n  return (\n    <g>\n      <text\n        textAnchor=\"start\"\n        x={HEADER_PADDING}\n        y={HEADER_PADDING}\n        alignmentBaseline=\"hanging\"\n        style={{fontSize: `4.0em`, fontFamily: 'clear_sansbold', fill: '#776e65'}}\n      >\n        2048\n      </text>\n    </g>\n  );\n}\n\n// The label showing the player score\nexport function ScoreLabel(props) {\n  let { score } = props;\n  score = Math.round(score);\n  const { LABEL_WIDTH, LABEL_HEIGHT, LABEL_CORNER_RADIUS } = LABEL_CONSTANTS;\n  const { BOARD_WIDTH } = BOARD_CONSTANTS;\n  return (\n    <g>\n      <rect\n        x={BOARD_WIDTH - HEADER_PADDING - LABEL_WIDTH} y={HEADER_PADDING}\n        rx={LABEL_CORNER_RADIUS}\n        width={LABEL_WIDTH} height={LABEL_HEIGHT}\n        style={{fill: '#bbad9f'}}\n      />\n      <text\n        textAnchor=\"middle\"\n        x={BOARD_WIDTH - HEADER_PADDING - LABEL_WIDTH/2}\n        y={HEADER_PADDING + LABEL_HEIGHT*0.23}\n        alignmentBaseline=\"baseline\"\n        style={{fontSize: `0.8em`, fontFamily: 'clear_sansbold', fill: '#ebe2d7'}}\n      >\n        SCORE\n      </text>\n      <text\n        textAnchor=\"middle\"\n        x={BOARD_WIDTH - HEADER_PADDING - LABEL_WIDTH/2}\n        y={HEADER_PADDING + LABEL_HEIGHT*0.7}\n        alignmentBaseline=\"baseline\"\n        style={{\n          fontSize: `${1.8 - 0.07*(String(score).length - 1)}em`,\n          fontFamily: 'clear_sansbold',\n          fill: '#ffffff'\n        }}\n      >\n        {score}\n      </text>\n    </g>\n  );\n}","import { FOOTER_HEIGHT, ORIGINAL_2048_URL } from './consts'\n\nexport default function Footer(props) {\n  return (\n    <g>\n      <text\n        textAnchor=\"middle\"\n        x={0}\n        y={FOOTER_HEIGHT/3}\n        alignmentBaseline=\"central\"\n        style={{fontSize: `1.0em`, fontFamily: 'clear_sansbold', fill: '#776e65'}}\n      >\n        {\"A simple clone of 2048,\"}\n      </text>\n      <a href={ORIGINAL_2048_URL}>\n        <text\n          textAnchor=\"middle\"\n          x={0}\n          y={FOOTER_HEIGHT/2}\n          alignmentBaseline=\"central\"\n          style={{fontSize: `1.0em`, fontFamily: 'clear_sansbold', fill: '#776e65'}}\n        >\n          {\"based off of Gabriele Cirulli's game.\"}\n        </text>\n      </a>\n      <text\n          textAnchor=\"middle\"\n          x={0}\n          y={FOOTER_HEIGHT * 2/3}\n          alignmentBaseline=\"central\"\n          style={{fontSize: `1.0em`, fontFamily: 'clear_sansbold', fill: '#776e65'}}\n        >\n          {\"Implemented with React.\"}\n        </text>\n    </g>\n  );\n}","import { Board, NumberTile } from './BoardElements'\nimport {\n  ANIMATION_DURATIONS,\n  BOARD_CONSTANTS, BOARD_COLOR,\n  FOOTER_HEIGHT, HEADER_HEIGHT,\n  MOVEMENT_DIRECTION_OF_EVENT_KEY,\n} from './consts';\nimport { ScoreLabel, Title } from './HeaderElements'\nimport Footer from './Footer'\nimport React from 'react';\nimport { Animate, NodeGroup } from \"react-move\";\nimport {\n  canMoveInDirection,\n  collapse,\n  extendWithNewEntry,\n  getPositionFlat,\n  gameOver,\n} from './utils';\nimport './style/index.css';\n\n// The main driver code for the game\nexport default class App extends React.Component {\n\n  // Set up the game\n  constructor(props) {\n      super(props);\n      this.state = {\n        filledData: [],\n        tileNumber: 0,\n        score: 0,\n      };\n      this.addNewEntry = this.addNewEntry.bind(this);\n      this.processKeyPress = this.processKeyPress.bind(this);\n      this.keyOfEntry = this.keyOfEntry.bind(this);\n  }\n\n  // Initialize game state once window open\n  componentDidMount() {\n    this.addNewEntry();\n    document.addEventListener(\"keydown\", this.processKeyPress, false);\n    setTimeout(this.addNewEntry, 200);\n  }\n\n  // Stop updating if component unmounting\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.processKeyPress, false);\n  }\n\n  // Process left, right, up, down keypress and update state as applicable\n  processKeyPress(event) {\n    let direction = MOVEMENT_DIRECTION_OF_EVENT_KEY[event.key];\n    if (direction === undefined) {\n      return;\n    }\n\n    this.setState(state => {\n      const oldFilledData = state.filledData;\n      if (!canMoveInDirection(oldFilledData, direction)) {\n        return {};\n      }\n      const { filledData, additionalScore } = collapse(oldFilledData, direction);\n      setTimeout(this.addNewEntry, ANIMATION_DURATIONS.MOVE_DURATION);\n      return {\n        filledData: filledData,\n        score: state.score + additionalScore,\n      }\n    });\n    if (gameOver(this.state.filledData)) {\n      document.removeEventListener(\"keydown\", this.processKeyPress, false);\n    }\n  }\n\n  // Returns the unique ID for an active tile.\n  keyOfEntry(data) {\n    return String(data.id);\n  }\n\n  // Adds a new active tile to the game board.\n  addNewEntry() {\n    this.setState(state => {\n      return {\n        filledData: extendWithNewEntry(state.filledData, state.tileNumber),\n        tileNumber: state.tileNumber + 1,\n      }\n    });\n  }\n\n  // Starts transition for the active tile.\n  startTransition(d, i) {\n    const { position } = d;\n    const { x, y } = getPositionFlat(position);\n    return {\n      x: x,\n      y: y,\n      scale: 0.0,\n    };\n  }\n\n  // The tile entering transition - gradually gets larger.\n  enterTransition(d, i) {\n    return {\n      scale: [1.0],\n      timing: {\n        duration: ANIMATION_DURATIONS.ENTER_DURATION\n      },\n    };\n  }\n\n  // The updating tile transition - slides across screen.\n  updateTransition(d, i) {\n    const { position } = d;\n    const {x, y} = getPositionFlat(position);\n    return {\n      x: [x],\n      y: [y],\n      timing: {\n        duration: ANIMATION_DURATIONS.MOVE_DURATION,\n      },\n    };\n  }\n\n  // The leaving tile transition - moves a little faster to make animation look \"smooth\"\n  updateLeave(d, i) {\n    const { position } = d;\n    const {x, y} = getPositionFlat(position);\n    return {\n      x: [x],\n      y: [y],\n      timing: {\n        duration: ANIMATION_DURATIONS.MOVE_DURATION/1.35,\n      },\n    }\n  }\n\n  // Render everything to the screen.\n  render() {\n    const { BOARD_WIDTH, BOARD_HEIGHT } = BOARD_CONSTANTS;\n    document.body.style = 'background: #faf8ef;';\n    return (\n      <div>\n        <svg width={BOARD_WIDTH} height={HEADER_HEIGHT + BOARD_HEIGHT + FOOTER_HEIGHT} align=\"center\">\n          <Title />\n          <Animate\n            show\n            start={{\n              value: 0\n            }}\n            update={{\n              value: [this.state.score],\n              timing: { duration: ANIMATION_DURATIONS.SCORE_INCREASE_DURATION },\n            }}\n          >\n            { ({ value }) => {\n              return (\n                <ScoreLabel score={value} />\n              );\n            }}\n          </Animate>\n          <g transform={`translate(${0},${HEADER_HEIGHT})`}>\n            <Board x={0} y={0} />\n            <NodeGroup\n              data={this.state.filledData}\n              keyAccessor={this.keyOfEntry}\n              start={this.startTransition}\n              enter={this.enterTransition}\n              update={this.updateTransition}\n              leave={this.updateLeave}\n              >\n              {(nodes) => (\n                <g>\n                  {nodes.map(({ key, data, state }) =>\n                    <NumberTile key={data.id} data={data} state={state} />\n                  )}\n                </g>\n              )}\n            </NodeGroup>\n            <Animate\n              show={gameOver(this.state.filledData)}\n              start={{\n                opacity: 0,\n                backgroundColor: BOARD_COLOR,\n              }}\n              enter={{\n                opacity: [0.7],\n                timing: { duration: 1000 },\n              }}\n            >\n              { ({backgroundColor, opacity}) => {\n                return (\n                  <g>\n                    <rect\n                      x={0} y={0}\n                      width={BOARD_WIDTH} height={BOARD_HEIGHT}\n                      style={{opacity: opacity, fill: backgroundColor}}\n                    />\n                    <text\n                      textAnchor=\"middle\"\n                      x={BOARD_WIDTH/2}\n                      y={BOARD_HEIGHT/2}\n                      alignmentBaseline=\"central\"\n                      style={{fontSize: `4em`, fontFamily: 'clear_sansbold', fill: '#776e65', opacity: opacity}}\n                    >\n                      You Lose!\n                    </text>\n                  </g>\n                );\n              }}\n            </Animate>\n          </g>\n          <g transform={`translate(${BOARD_WIDTH/2},${HEADER_HEIGHT + BOARD_HEIGHT})`}>\n            <Footer />\n          </g>\n        </svg>\n      </div>\n    );\n  }\n}\n\n","import ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}